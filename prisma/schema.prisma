// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  extensions = [postgis]
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum MessageStatus {
  sent
  delivered
  read
}

enum ForumPostStatus {
  active
  hidden
  deleted
}


enum TokenType {
  CONFIRM_EMAIL
  RESET_PASSWORD
  REFRESH_TOKEN
}

enum UserRole {
  MEMBER
  MANAGER
  ADMIN
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BlogStatus {
  PUBLISHED
  DRAFT
  PRIVATE
}


// Rest of the schema remains the same, updating User model
model User {
  id String @id @default(cuid())
  email         String          @unique @db.VarChar(255)
  hashedPassword        String?        @db.Text
  name      String          @db.VarChar(100)
  imageUrl              String?        @db.Text
  imageId               String?
  emailConfirmed        Boolean        @default(false)
  locked                Boolean        @default(false)
  role                  UserRole           @default(MEMBER)
  birthDate             DateTime?      @db.Date
  gender                Gender?     
  about                 String?        @db.Text
  alias                 String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  vendor        Vendor?
  bookings      Booking[]
  reviews       Review[]
  blogPosts     BlogPost[]
  conversations Conversation[]
  messages      Message[]
  forumTopics   ForumTopic[]
  forumPosts    ForumPost[]
  tokens        Token[]

  likedVendors          UserLikeVendor[]
  followingVendors      UserFollowVendor[]

  @@map("users")
}

model Token {
  id String @id @default(cuid())
  token       String     
  expiryTime  DateTime
  type        TokenType
  userId      String

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
  @@unique([token, userId])
}



// Models
model Country {
  id String @id @default(cuid())
  name             String           @db.VarChar(100)
  code             String           @unique @db.Char(2)
  vendorLocations  VendorLocation[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("countries")
}

model Vendor {
  id String @id @default(cuid())
  userId         String             @unique
  user           User             @relation(fields: [userId], references: [id])
  businessName   String           @db.VarChar(255)
  categories      VendorCategory[]
  description    String?
  contactEmail   String?          @db.VarChar(255)
  contactPhone   String?          @db.VarChar(20)
  websiteUrl     String?          @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  locations      VendorLocation[]
  services       Service[]
  bookings       Booking[]
  reviews        Review[]
  photos         Photo[]
  conversations  Conversation[]

  Followers   UserFollowVendor[]
  UserLikes   UserLikeVendor[]

  @@map("vendors")
}

model Category {
  id String @id @default(cuid())
  name        String       @db.VarChar(100)
  slug        String       @unique @db.VarChar(100)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  vendors      VendorCategory[]

  @@map("categories")
}

model VendorLocation {
  id String @id @default(cuid())
  vendorId            String
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  countryId           String
  country             Country  @relation(fields: [countryId], references: [id])
  locationName        String?  @db.VarChar(255)
  isPrimary           Boolean  @default(false)
  administrativeArea1 String?  @db.VarChar(100)
  administrativeArea2 String?  @db.VarChar(100)
  locality            String?  @db.VarChar(100)
  subLocality         String?  @db.VarChar(100)
  neighborhood        String?  @db.VarChar(100)
  streetAddress       String?
  postalCode          String?  @db.VarChar(20)
  landmark            String?
  coordinates         Unsupported("geography(Point, 4326)")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("vendor_locations")
}

model VendorCategory {
  vendorId  String
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])

  @@unique([vendorId, categoryId])
  @@map("_VendorToCategory")
}

model UserLikeVendor {
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId String
  vendor   Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  likedAt  DateTime  @default(now())

  @@unique([userId, vendorId])
  @@map("_UserToLikedVendor")
}

model UserFollowVendor {
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId String
  vendor   Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  followedAt  DateTime  @default(now())

  @@unique([userId, vendorId])
  @@map("_UserToFollowVendor")
}

model Service {
  id String @id @default(cuid())
  vendorId    String
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  name        String    @db.VarChar(255)
  description String?
  price       Decimal?  @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("services")
}

model Booking {
  id String @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  vendorId  String
  vendor    Vendor        @relation(fields: [vendorId], references: [id])
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id])
  bookingDate DateTime    @db.Date
  status    BookingStatus @default(pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("bookings")
}

model Review {
  id String @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Photo {
  id String @id @default(cuid())
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  url       String   @db.VarChar(255)
  caption   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photos")
}

model BlogCategory {
  id String @id @default(cuid())
  name        String     @db.VarChar(100)
  slug        String     @unique @db.VarChar(100)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  blogPosts   BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id String @id @default(cuid())
  name      String     @db.VarChar(50)
  slug      String     @unique @db.VarChar(50)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[]

  @@map("blog_tags")
}

model BlogPost {
  id String @id @default(cuid())
  title             String       @db.VarChar(255)
  slug              String       @unique @db.VarChar(255)
  content           String
  excerpt           String?
  imageUrl          String?      @db.VarChar(255)
  imageId           String?      
  views             Int           @default(0)
  authorId          String
  author            User         @relation(fields: [authorId], references: [id])
  status            String       @default("draft") @db.VarChar(20)
  publishedAt       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  categories        BlogCategory[]
  tags              BlogTag[]

  @@map("blog_posts")
}

model Conversation {
  id String @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  vendorId       String
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
  lastMessageAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[]

  @@map("conversations")
}

model Message {
  id String @id @default(cuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id])
  content        String
  status         MessageStatus @default(sent)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("messages")
}

model ForumCategory {
  id String @id @default(cuid())
  name        String       @db.VarChar(100)
  slug        String       @unique @db.VarChar(100)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  topics      ForumTopic[]

  @@map("forum_categories")
}

model ForumTopic {
  id String @id @default(cuid())
  categoryId String
  category   ForumCategory @relation(fields: [categoryId], references: [id])
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  title      String        @db.VarChar(255)
  content    String
  views      Int           @default(0)
  isPinned   Boolean       @default(false)
  isLocked   Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  posts      ForumPost[]

  @@map("forum_topics")
}

model ForumPost {
  id String @id @default(cuid())
  topicId   String
  topic     ForumTopic      @relation(fields: [topicId], references: [id])
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  content   String
  status    ForumPostStatus @default(active)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("forum_posts")
}


