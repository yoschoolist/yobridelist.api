// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  extensions = [postgis]
}

// Enums
enum VendorCategory {
  photographer
  venue
  catering
  decor
  attire
  music
  beauty
  planner
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum MessageStatus {
  sent
  delivered
  read
}

enum ForumPostStatus {
  active
  hidden
  deleted
}

enum UserRole {
  member
  manager
  admin
  superadmin
}

// Rest of the schema remains the same, updating User model
model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(255)
  passwordHash  String          @db.VarChar(255)
  fullName      String          @db.VarChar(100)
  role          UserRole        @default(member)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  vendor        Vendor?
  bookings      Booking[]
  reviews       Review[]
  blogPosts     BlogPost[]
  conversations Conversation[]
  messages      Message[]
  forumTopics   ForumTopic[]
  forumPosts    ForumPost[]

  @@map("users")
}




// Models
model Country {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(100)
  code             String           @unique @db.Char(2)
  vendorLocations  VendorLocation[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("countries")
}

model Vendor {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id])
  businessName   String           @db.VarChar(255)
  category       VendorCategory
  description    String?
  contactEmail   String?          @db.VarChar(255)
  contactPhone   String?          @db.VarChar(20)
  websiteUrl     String?          @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  locations      VendorLocation[]
  services       Service[]
  bookings       Booking[]
  reviews        Review[]
  photos         Photo[]
  conversations  Conversation[]

  @@map("vendors")
}

model VendorLocation {
  id                  Int      @id @default(autoincrement())
  vendorId            Int
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  countryId           Int
  country             Country  @relation(fields: [countryId], references: [id])
  locationName        String?  @db.VarChar(255)
  isPrimary           Boolean  @default(false)
  administrativeArea1 String?  @db.VarChar(100)
  administrativeArea2 String?  @db.VarChar(100)
  locality            String?  @db.VarChar(100)
  subLocality         String?  @db.VarChar(100)
  neighborhood        String?  @db.VarChar(100)
  streetAddress       String?
  postalCode          String?  @db.VarChar(20)
  landmark            String?
  coordinates         Unsupported("geography(Point, 4326)")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("vendor_locations")
}

model Service {
  id          Int       @id @default(autoincrement())
  vendorId    Int
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  name        String    @db.VarChar(255)
  description String?
  price       Decimal?  @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("services")
}

model Booking {
  id        Int           @id @default(autoincrement())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  vendorId  Int
  vendor    Vendor        @relation(fields: [vendorId], references: [id])
  serviceId Int
  service   Service       @relation(fields: [serviceId], references: [id])
  bookingDate DateTime    @db.Date
  status    BookingStatus @default(pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("bookings")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  vendorId  Int
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Photo {
  id        Int      @id @default(autoincrement())
  vendorId  Int
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  url       String   @db.VarChar(255)
  caption   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photos")
}

model BlogCategory {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  slug        String     @unique @db.VarChar(100)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  blogPosts   BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(50)
  slug      String     @unique @db.VarChar(50)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[]

  @@map("blog_tags")
}

model BlogPost {
  id                Int          @id @default(autoincrement())
  title             String       @db.VarChar(255)
  slug              String       @unique @db.VarChar(255)
  content           String
  excerpt           String?
  featuredImageUrl  String?      @db.VarChar(255)
  authorId          Int
  author            User         @relation(fields: [authorId], references: [id])
  status            String       @default("draft") @db.VarChar(20)
  publishedAt       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  categories        BlogCategory[]
  tags              BlogTag[]

  @@map("blog_posts")
}

model Conversation {
  id             Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  vendorId       Int
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
  lastMessageAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[]

  @@map("conversations")
}

model Message {
  id             Int           @id @default(autoincrement())
  conversationId Int
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  senderId       Int
  sender         User          @relation(fields: [senderId], references: [id])
  content        String
  status         MessageStatus @default(sent)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("messages")
}

model ForumCategory {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  slug        String       @unique @db.VarChar(100)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  topics      ForumTopic[]

  @@map("forum_categories")
}

model ForumTopic {
  id         Int           @id @default(autoincrement())
  categoryId Int
  category   ForumCategory @relation(fields: [categoryId], references: [id])
  userId     Int
  user       User          @relation(fields: [userId], references: [id])
  title      String        @db.VarChar(255)
  content    String
  views      Int           @default(0)
  isPinned   Boolean       @default(false)
  isLocked   Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  posts      ForumPost[]

  @@map("forum_topics")
}

model ForumPost {
  id        Int             @id @default(autoincrement())
  topicId   Int
  topic     ForumTopic      @relation(fields: [topicId], references: [id])
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  content   String
  status    ForumPostStatus @default(active)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("forum_posts")
}